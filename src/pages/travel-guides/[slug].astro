---
import rehypeToc, {
  HtmlElementNode,
  ListNode,
  TextNode,
} from "@jsdevtools/rehype-toc";
import { processor, notion, databaseId, listBlocks } from "../../notion";
import TravelGuideLayout from "../../layouts/TravelGuide.astro";
import { TreeNode } from "../../components/toc/tree-node";

export async function getStaticPaths() {
  const { results } = await notion.databases.query({
    database_id: databaseId,
    filter: {
      property: "Draft",
      checkbox: {
        equals: false,
      },
    },
  });

  return results.map((page) => {
    if (!("properties" in page)) {
      throw new Error("Got partial data");
    }

    const urlProperty = page.properties["URL"];
    if (urlProperty.type !== "rich_text") {
      throw new Error(`Wrong property type ${urlProperty.type}`);
    }

    const urlRichText = urlProperty.rich_text;
    return {
      params: {
        slug: urlRichText.map((text) => text.plain_text).join(""),
      },
      props: {
        page,
      },
    };
  });
}

export type Props = Awaited<ReturnType<typeof getStaticPaths>>[number]["props"];
const { page } = Astro.props;

const titleProperty = Object.values(page.properties).find(
  (
    property
  ): property is Extract<
    Props["page"]["properties"][string],
    { title: unknown }
  > => "title" in property
);
let cover: string | undefined;
switch (page.cover.type) {
  case "external":
    cover = page.cover.external.url;
    break;
  case "file":
    cover = page.cover.file.url;
    break;
}
console.log(cover, page.cover);

const content = {
  title: titleProperty.title.map((text) => text.plain_text).join(""),
  cover,
  pubDate: page.created_time,
  updatedDate: page.last_edited_time,
};

function extractTocHeadings(toc: HtmlElementNode): TreeNode[] {
  if (toc.tagName !== "nav") {
    throw new Error(`Expected nav, got ${toc.tagName}`);
  }

  function listElementToTree(ol: ListNode): TreeNode[] {
    return ol.children.map((li) => {
      const [_link, subList] = li.children;
      const link = _link as HtmlElementNode;

      return {
        text: (link.children[0] as TextNode).value,
        slug: link.properties.href.slice(1),
        children: subList ? listElementToTree(subList as ListNode) : [],
      };
    });
  }

  return listElementToTree(toc.children[0] as ListNode);
}

const blocks = await listBlocks(page.id);
let headerTree: TreeNode[] = [];
const vFile = await processor()
  .use(rehypeToc, {
    customizeTOC(toc) {
      headerTree = extractTocHeadings(toc);
      return null;
    },
  })
  .process({ data: blocks });
---

<TravelGuideLayout content={content} headerTree={headerTree}>
  <Fragment set:html={vFile.toString()} />
</TravelGuideLayout>
